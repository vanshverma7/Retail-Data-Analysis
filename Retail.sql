-- Calculating the total number of rows in each of the three tables within the database.
select Sum(Count) [Count] from (
select count(*) [Count]  from Customer
union all
select COUNT(*) from prod_cat_info
union all
select COUNT(*) from Transactions) as x

select * from Customer
select * from prod_cat_info
select * from Transactions

-- Counting the total number of transactions that have a return.
select COUNT (*) CNT from Transactions
where Qty < 0

-- Converting the date variables into valid date formats as the dates across the datasets are not in the correct format.
select * from Transactions
where tran_date like '%/%'

-- Identifying the time range of the transaction data available for analysis, displaying the results in days, months, and years in separate columns.
select *, DATEDIFF(DAY, [Min Date], [Max Dte]) [Days],
DATEDIFF(MONTH, [Min Date], [Max Dte]) [MONTHS],
DATEDIFF(YEAR, [Min Date], [Max Dte]) [YEARS]
from (
select MAX(tran_date) [Max Dte], MIN(tran_date) [Min Date]from Transactions ) as x

-- Identifying the product category to which the sub-category “DIY” belongs.
SELECT prod_subcat, prod_cat FROM prod_cat_info
WHERE prod_subcat = 'DIY'

------------------------------------------------------------------------------
-- Determining which channel is most frequently used for transactions.
Select top 1 Store_type, COUNT(Store_type) [Channel] from Transactions
group by Store_type
order by Channel desc

-- Counting the number of male and female customers in the database.
select Gender, COUNT(Gender) CNT from Customer
WHERE GENDER IS NOT NULL
GROUP BY Gender

-- Identifying the city with the maximum number of customers and the total number of customers from that city.
SELECT TOP 1 city_code, COUNT(city_code) CNT FROM Customer
WHERE city_code IS NOT NULL
GROUP BY city_code
ORDER BY CNT DESC

-- Counting the number of sub-categories under the "Books" category.
select COUNT(*) CNT from prod_cat_info
where prod_cat = 'Books'

-- Finding the maximum quantity of products ever ordered.
SELECT TOP 1 prod_cat, SUM(Qty) [SUM] FROM Transactions A
JOIN prod_cat_info B
ON A.prod_cat_code = B.prod_cat_code
GROUP BY prod_cat
ORDER BY SUM DESC 

-- Calculating the net total revenue generated in the "Electronics" and "Books" categories.
select top 1 *,
LEAD(prod_cat, 1) over (order by [electronic total]) as [prod_cat],
LEAD([Electronic Total], 1) over (order by [electronic total]) as [Books Total],
[Electronic Total] + (LEAD([Electronic Total], 1) over (order by [electronic total])) [Grand Total]
from (
SELECT prod_cat, round(SUM(total_amt), 0) [Electronic Total] FROM Transactions a
JOIN prod_cat_info b
on a.prod_cat_code = b.prod_cat_code
where prod_cat = 'Electronics'
group by prod_cat
union
SELECT prod_cat, round(SUM(total_amt), 0) [Electronic Total] FROM Transactions a
JOIN prod_cat_info b
on a.prod_cat_code = b.prod_cat_code
where prod_cat = 'Books'
group by prod_cat) as x
-------------------------OR--------------------------------------
select SUM ([Electronic Total])[Total] from (
SELECT prod_cat, round(SUM(total_amt), 0) [Electronic Total] FROM Transactions a
JOIN prod_cat_info b
on a.prod_cat_code = b.prod_cat_code
where prod_cat in ('Books', 'Electronics')
group by prod_cat ) as x

-- Counting the number of customers with more than 10 transactions, excluding returns.
select COUNT(*) [No of Customers] from (
select cust_id, COUNT(cust_id) CNT from Transactions
where total_amt > 0
group by cust_id
having COUNT(cust_id) > 10 ) as x

-- Calculating the combined revenue earned from the "Electronics" and "Clothing" categories within the "Flagship store."
select SUM([Total Amt]) [Combined Revenue] from (
select round(total_amt, 0) [Total Amt], b.prod_cat  from Transactions a
join prod_cat_info b
on a.prod_cat_code = b.prod_cat_code
where Store_type = 'Flagship store') as x
where prod_cat in ('Electronics', 'Clothing')
-----------------------------------------------------
select round(SUM(total_amt), 0) [Combined Revenue] from Transactions a
join prod_cat_info b
on a.prod_cat_code = b.prod_cat_code
where Store_type = 'Flagship store' and prod_cat in ('Electronics', 'Clothing')

-- Calculating the total revenue generated from male customers in the "Electronics" category, displaying the revenue by product sub-category.
select b.prod_cat, b.prod_subcat, round(SUM(total_amt), 0) [Total Revenue] from Transactions a
left join prod_cat_info b
on a.prod_cat_code = b.prod_cat_code and a.prod_subcat_code = b.prod_sub_cat_code
left join Customer c
on a.cust_id = c.customer_Id
where c.Gender = 'M' and prod_cat = 'Electronics'
group by b.prod_cat, b.prod_subcat
order by [Total Revenue] desc

-- Calculating the net total revenue generated by customers aged between 25 and 35 years during the last 30 days of transactions from the maximum transaction date available.
select SUM(Total_Amt) [Total Revenue] from (
SELECT a.tran_date, round(a.total_amt, 0) Total_Amt, DATEDIFF(YEAR, b.DOB, a.tran_date) [AGE] FROM Transactions a
JOIN Customer b
on a.cust_id = b.customer_Id
where DATEDIFF(YEAR, b.DOB, a.tran_date) >= 25 and DATEDIFF(YEAR, b.DOB, a.tran_date) <= 35) as x
where tran_date between DATEADD(MONTH, -1,(select max(tran_date) from transactions)) and 
(select MAX(tran_date) from Transactions)

-- Identifying the product category with the maximum value of returns in the last three months of transactions.
select prod_cat_code, COUNT(prod_cat_code) [CNT] from Transactions
where total_amt < 0 and tran_date between DATEADD(MONTH, -3,(select max(tran_date) from transactions)) and 
(select MAX(tran_date) from Transactions)
GROUP BY prod_cat_code
ORDER BY CNT DESC

-- Determining which store type sells the maximum products based on both the value of sales amount and the quantity sold.
SELECT Store_type, SUM(total_amt) [AMT], SUM(QTY) [QTY] FROM Transactions
group by Store_type
order by AMT, Qty desc

-- Identifying the categories for which the average revenue exceeds the overall average revenue.
select prod_cat_code, AVG(total_amt) [Prod_AVG] from Transactions
group by prod_cat_code
having AVG(total_amt) > (select AVG(total_amt) from Transactions)

-- Calculating the average and total revenue for each subcategory within the top five categories in terms of quantity sold.
select prod_subcat_code, round(AVG(total_amt), 0) [AVG], round(SUM(total_amt), 0) [Sum] from Transactions
where prod_cat_code in (select prod_cat_code from (
select top 5 prod_cat_code, SUM(Qty) [qty sum] from Transactions
group by prod_cat_code
order by [qty sum] desc ) as x)
group by prod_subcat_code
